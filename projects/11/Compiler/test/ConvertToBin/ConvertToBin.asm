// init
@256
D=A
@SP
M=D
@Bootstrap$ret.0
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Bootstrap$ret.0)
// function Main.main 1
(Main.main)
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 8001
@8001
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// call Main.fillMemory 3
@Main.main$ret.0
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fillMemory
0;JMP
(Main.main$ret.0)
// push constant 8000
@8000
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.peek 1
@Main.main$ret.1
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Main.main$ret.1)
// pop local 0
@0
D=A
@LCL
D=D+M
@temp
M=D
@SP
M=M-1
A=M
D=M
@temp
A=M
M=D
// call Main.convert 1
@Main.main$ret.2
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.convert
0;JMP
(Main.main$ret.2)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@5
A=D-A
D=M
@temp
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@temp
A=M
0;JMP
// function Main.convert 3
(Main.convert)
@0
D=A
@SP
M=M+1
A=M-1
M=D
@0
D=A
@SP
M=M+1
A=M-1
M=D
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M
// pop local 2
@2
D=A
@LCL
D=D+M
@temp
M=D
@SP
M=M-1
A=M
D=M
@temp
A=M
M=D
// label whileBegin1
(Main.convert$whileBegin1)
// not
@SP
A=M-1
M=!M
// if-goto whileEnd1
@SP
M=M-1
A=M
D=M
@Main.convert$whileEnd1
D;JNE
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
A=A-1
D=D+M
M=D
// pop local 1
@1
D=A
@LCL
D=D+M
@temp
M=D
@SP
M=M-1
A=M
D=M
@temp
A=M
M=D
// call Main.nextMask 1
@Main.convert$ret.0
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.nextMask
0;JMP
(Main.convert$ret.0)
// pop local 0
@0
D=A
@LCL
D=D+M
@temp
M=D
@SP
M=M-1
A=M
D=M
@temp
A=M
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=0
@GT_4
D;JGT
@GT_END_4
0;JEQ
(GT_4)
@SP
A=M-1
M=-1
(GT_END_4)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto ifElse1
@SP
M=M-1
A=M
D=M
@Main.convert$ifElse1
D;JNE
// and
@SP
M=M-1
A=M
D=M
A=A-1
D=D&M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=0
@EQ_8
D;JEQ
@EQ_END_8
0;JEQ
(EQ_8)
@SP
A=M-1
M=-1
(EQ_END_8)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto ifElse2
@SP
M=M-1
A=M
D=M
@Main.convert$ifElse2
D;JNE
// push constant 8000
@8000
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
A=A-1
D=D+M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.poke 2
@Main.convert$ret.1
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.convert$ret.1)
// goto ifEnd2
@Main.convert$ifEnd2
0;JMP
// label ifElse2
(Main.convert$ifElse2)
// push constant 8000
@8000
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
A=A-1
D=D+M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.poke 2
@Main.convert$ret.2
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.convert$ret.2)
// label ifEnd2
(Main.convert$ifEnd2)
// goto ifEnd1
@Main.convert$ifEnd1
0;JMP
// label ifElse1
(Main.convert$ifElse1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
D=D+M
@temp
M=D
@SP
M=M-1
A=M
D=M
@temp
A=M
M=D
// label ifEnd1
(Main.convert$ifEnd1)
// goto whileBegin1
@Main.convert$whileBegin1
0;JMP
// label whileEnd1
(Main.convert$whileEnd1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@5
A=D-A
D=M
@temp
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@temp
A=M
0;JMP
// function Main.nextMask 0
(Main.nextMask)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=0
@EQ_13
D;JEQ
@EQ_END_13
0;JEQ
(EQ_13)
@SP
A=M-1
M=-1
(EQ_END_13)
// not
@SP
A=M-1
M=!M
// if-goto ifElse1
@SP
M=M-1
A=M
D=M
@Main.nextMask$ifElse1
D;JNE
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@5
A=D-A
D=M
@temp
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@temp
A=M
0;JMP
// goto ifEnd1
@Main.nextMask$ifEnd1
0;JMP
// label ifElse1
(Main.nextMask$ifElse1)
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2
@Main.nextMask$ret.0
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.nextMask$ret.0)
// return
@LCL
D=M
@5
A=D-A
D=M
@temp
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@temp
A=M
0;JMP
// label ifEnd1
(Main.nextMask$ifEnd1)
// function Main.fillMemory 0
(Main.fillMemory)
// label whileBegin1
(Main.fillMemory$whileBegin1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=0
@GT_15
D;JGT
@GT_END_15
0;JEQ
(GT_15)
@SP
A=M-1
M=-1
(GT_END_15)
// not
@SP
A=M-1
M=!M
// if-goto whileEnd1
@SP
M=M-1
A=M
D=M
@Main.fillMemory$whileEnd1
D;JNE
// call Memory.poke 2
@Main.fillMemory$ret.0
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
M=M+1
A=M
M=D
@ARG
D=M
@SP
M=M+1
A=M
M=D
@THIS
D=M
@SP
M=M+1
A=M
M=D
@THAT
D=M
@SP
M=M+1
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.fillMemory$ret.0)
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=D
// pop argument 1
@1
D=A
@ARG
D=D+M
@temp
M=D
@SP
M=M-1
A=M
D=M
@temp
A=M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
A=A-1
D=D+M
M=D
// pop argument 0
@0
D=A
@ARG
D=D+M
@temp
M=D
@SP
M=M-1
A=M
D=M
@temp
A=M
M=D
// goto whileBegin1
@Main.fillMemory$whileBegin1
0;JMP
// label whileEnd1
(Main.fillMemory$whileEnd1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@5
A=D-A
D=M
@temp
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@temp
A=M
0;JMP
